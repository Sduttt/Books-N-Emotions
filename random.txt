 ```
import { prisma } from "@/utils/connect";
import { NextResponse } from "next/server";

export const PUT = async ({ params }: { params: { intentId: string } }) => {


    const { intentId } = params;

    try {

        await prisma.order.update({
            where: {
                intent_id: intentId,
            },
            data: {
                status: "Paid",
            },
        });

        return new NextResponse(JSON.stringify({ message: "Order updated" }), { status: 200 })

    } catch (error) {
        console.log(error)
        return new NextResponse(JSON.stringify({ message: "Something went wrong" }), { status: 500 })

    }

}
```

This is the route.ts file whose location is `src/app/api/(checkout)/confirm/[intentId]/route.ts`

```
'use client';

import { useRouter, useSearchParams } from "next/navigation";
import { useEffect } from "react";

const SuccessPage = () => {

  const searchParams = useSearchParams();
  const router = useRouter();

  const payment_intent = searchParams.get("payment_intent");
  console.log(payment_intent)
  // http://localhost:3000/success?payment_intent=pi_3Nlwc6SHHrG5CUzj1MzPAnPK&payment_intent_client_secret=pi_3Nlwc6SHHrG5CUzj1MzPAnPK_secret_wpubYjC6ezeRH9yKooFWEdy2X&redirect_status=succeeded
  useEffect(() => {
    const makeRequest = async () => {
      try {
        await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/confirm/${payment_intent}`, {
          method: "PUT",
        });
        setTimeout(() => {
          router.push("/orders");
        }, 5000);
      } catch (error) {
        console.log(error)
      }
    }

    makeRequest();
    }, [payment_intent, router]);
    
  return (
    <div className="min-h-[calc(100vh-7rem)] sm:min-h-[calc(100vh-9rem)] md:min-h-[calc(100vh-11rem)]">
      Payment successful, redirecting...
    </div>
  )
}

export default SuccessPage
```


This is the page.tsx file and its location `src/app/success/page.tsx` 

Here is the api url in .env file `NEXT_PUBLIC_API_URL=http://localhost:3000`

the error shown in terminal is `error TypeError: Cannot destructure property 'intentId' of 'params' as it is undefined.`

I have checked if the intent id exists using the following code, and it exists
```
const order = await prisma.order.findUnique({
  where: {
    intent_id: intentId,
  },
});

if (!order) {
  console.log(`Order with intentId ${intentId} not found`);
  // Handle order not found situation
}
```

while i checked if params passed correctly or not, it was not passed correctly. here is how i checked it:
```
if (!params) {
  console.log('params is undefined');
  // Handle undefined params...
} else {
  const { intentId } = params;
  // Continue with the rest of the code...
}
```

here the order status is not updating after the payment. how to fix it? 
